import os
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications.resnet import ResNet50, preprocess_input
from tensorflow.keras.layers import Flatten, Dense
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.callbacks import ReduceLROnPlateau
from tensorflow.keras.regularizers import l2
from tensorflow.keras import regularizers
from tensorflow.keras.optimizers import Adam 

# Set random seed for numpy and TensorFlow
np.random.seed(42)
tf.random.set_seed(42)

def train(train_generator, val_generator, num_classes):
    print("Training model...")
    
    base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

    # Add custom layers on top of the base model
    x = base_model.output
    x = Flatten()(x)
    x = Dense(2048, activation='relu', kernel_regularizer=regularizers.l2(0.0001))(x)
    x = Dense(1024, activation='relu', kernel_regularizer=regularizers.l2(0.0001))(x)
    preds = Dense(num_classes, activation='softmax')(x)

    # Create the final model
    model = tf.keras.models.Model(inputs=base_model.input, outputs=preds)
    print("Created new model.")
    # model.summary()

    # Compile the model
    reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=2, min_lr=0.0001)
    early_stop = EarlyStopping(monitor='val_loss', patience=5, verbose=1, restore_best_weights=True)
    # Create the Adam optimizer with custom learning rate
    custom_lr = 0.01
    optimizerrr = Adam(learning_rate=custom_lr)
    
    model.compile(optimizer=optimizerrr, loss='categorical_crossentropy', metrics=['accuracy']) 
    
    # Train the model
    model.fit(train_generator, validation_data=val_generator, epochs=100, callbacks=[early_stop, reduce_lr])

    # Save the model
    model.save('train_RES.h5')
    print("Training completed.")
    return model

def main():
    # Setup directories and labels file
    labels_file = 'purdue-face-recognition-challenge-2024/train.csv'
    data_dir = 'main_data'  # Change this to your main data directory
    val_dir = 'validation'  # Change this to your validation directory

    # Read labels file
    labels_df = pd.read_csv(labels_file)
    num_classes = len(labels_df['Category'].unique())

    # Create ImageDataGenerators
    train_datagen = ImageDataGenerator(preprocessing_function=preprocess_input,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True)
    val_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)

    # Flow training images from train directory
    train_generator = train_datagen.flow_from_directory(
        os.path.join(data_dir, 'train'),
        target_size=(224, 224),
        batch_size=32, # try 64
        class_mode='categorical')

    # Flow validation images from validation directory
    val_generator = val_datagen.flow_from_directory(
        os.path.join(data_dir, val_dir),
        target_size=(224, 224),
        batch_size=32, # try 64
        class_mode='categorical')

    # Train the model
    model = train(train_generator, val_generator, num_classes)

if __name__ == "__main__":
    main()
